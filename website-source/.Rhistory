# Load necessary libraries
library(dplyr)
library(caret)
file_path <- '../data/csv/hints_cleaned_forML_spearman.csv'
hints_cleaned <- read.csv(file_path)
# Drop the 'SeekCancerInfo' column from hints_cleaned
hints_cleaned <- hints_cleaned %>%
select(-SeekCancerInfo)
# Drop rows with NA values
hints_cleaned_cleaned <- na.omit(hints_cleaned)
# Convert to numeric
# Define the mappings as lists in R
trust_mapping <- c("Not at all" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
agreement_mapping <- c("Strongly agree" = 1, "Somewhat agree" = 2, "Somewhat disagree" = 3, "Strongly disagree" = 4)
binary_mapping <- c("Yes" = 1, "No" = 2)
misleading_info_mapping <- c("I do not use social media" = 5, "None" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
# Create a named list to map columns to respective mappings
mapped_columns <- list(
"CancerFrustrated" = agreement_mapping,
"CancerTrustDoctor" = trust_mapping,
"CancerTrustFamily" = trust_mapping,
"CancerTrustGov" = trust_mapping,
"CancerTrustCharities" = trust_mapping,
"CancerTrustReligiousOrgs" = trust_mapping,
"CancerTrustScientists" = trust_mapping,
"TrustHCSystem" = trust_mapping,
"Electronic2_HealthInfo" = binary_mapping,
"MisleadingHealthInfo" = misleading_info_mapping,
"SeekCancerInfo" = binary_mapping
)
# Apply the mappings to the respective columns
for (column in names(mapped_columns)) {
hints_cleaned[[column]] <- as.integer(factor(hints_cleaned[[column]], levels = names(mapped_columns[[column]]), labels = mapped_columns[[column]]))
}
# Load necessary libraries
library(dplyr)
library(caret)
file_path <- '../data/csv/hints_cleaned_forML_spearman.csv'
hints_cleaned <- read.csv(file_path)
# Drop the 'SeekCancerInfo' column from hints_cleaned
hints_cleaned <- hints_cleaned %>%
select(-SeekCancerInfo)
# Drop rows with NA values
hints_cleaned_cleaned <- na.omit(hints_cleaned)
# Convert to numeric
# Define the mappings as lists in R
trust_mapping <- c("Not at all" = 4, "A little" = 3, "Some" = 2, "A lot" = 1, "no_answer" = NA)  # Example adding NA for unmatched values
agreement_mapping <- c("Strongly agree" = 1, "Somewhat agree" = 2, "Somewhat disagree" = 3, "Strongly disagree" = 4)
binary_mapping <- c("Yes" = 1, "No" = 2)
misleading_info_mapping <- c("I do not use social media" = 5, "None" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
# Create a named list to map columns to respective mappings
mapped_columns <- list(
"CancerFrustrated" = agreement_mapping,
"CancerTrustDoctor" = trust_mapping,
"CancerTrustFamily" = trust_mapping,
"CancerTrustGov" = trust_mapping,
"CancerTrustCharities" = trust_mapping,
"CancerTrustReligiousOrgs" = trust_mapping,
"CancerTrustScientists" = trust_mapping,
"TrustHCSystem" = trust_mapping,
"Electronic2_HealthInfo" = binary_mapping,
"MisleadingHealthInfo" = misleading_info_mapping,
"SeekCancerInfo" = binary_mapping
)
# Apply the mappings to the respective columns
for (column in names(mapped_columns)) {
hints_cleaned[[column]] <- as.integer(factor(hints_cleaned[[column]], levels = names(mapped_columns[[column]]), labels = mapped_columns[[column]]))
}
# Load necessary libraries
library(dplyr)
library(caret)
file_path <- '../data/csv/hints_cleaned_forML_spearman.csv'
hints_cleaned <- read.csv(file_path)
# Drop the 'SeekCancerInfo' column from hints_cleaned
hints_cleaned <- hints_cleaned %>%
select(-SeekCancerInfo)
# Drop rows with NA values
hints_cleaned_cleaned <- na.omit(hints_cleaned)
# Convert to numeric
# Define the mappings as lists in R
trust_mapping <- c("Not at all" = 4, "A little" = 3, "Some" = 2, "A lot" = 1, "no_answer" = NA)  # Example adding NA for unmatched values
agreement_mapping <- c("Strongly agree" = 1, "Somewhat agree" = 2, "Somewhat disagree" = 3, "Strongly disagree" = 4)
binary_mapping <- c("Yes" = 1, "No" = 2)
misleading_info_mapping <- c("I do not use social media" = 5, "None" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
# Create a named list to map columns to respective mappings
mapped_columns <- list(
"CancerFrustrated" = agreement_mapping,
"CancerTrustDoctor" = trust_mapping,
"CancerTrustFamily" = trust_mapping,
"CancerTrustGov" = trust_mapping,
"CancerTrustCharities" = trust_mapping,
"CancerTrustReligiousOrgs" = trust_mapping,
"CancerTrustScientists" = trust_mapping,
"TrustHCSystem" = trust_mapping,
"Electronic2_HealthInfo" = binary_mapping,
"MisleadingHealthInfo" = misleading_info_mapping,
"SeekCancerInfo" = binary_mapping
)
# Drop rows where 'MisleadingHealthInfo' is NA
hints_cleaned <- hints_cleaned[!is.na(hints_cleaned$MisleadingHealthInfo), ]
# Apply the mappings to the respective columns
for (column in names(mapped_columns)) {
hints_cleaned[[column]] <- as.integer(factor(hints_cleaned[[column]], levels = names(mapped_columns[[column]]), labels = mapped_columns[[column]]))
}
# Load necessary libraries
library(dplyr)
library(caret)
file_path <- '../data/csv/hints_cleaned_forML_spearman.csv'
hints_cleaned <- read.csv(file_path)
# Drop the 'SeekCancerInfo' column from hints_cleaned
hints_cleaned <- hints_cleaned %>%
select(-SeekCancerInfo)
# Drop rows with NA values
hints_cleaned <- na.omit(hints_cleaned)
# Convert to numeric
# Define the mappings as lists in R
trust_mapping <- c("Not at all" = 4, "A little" = 3, "Some" = 2, "A lot" = 1, "no_answer" = NA)  # Example adding NA for unmatched values
agreement_mapping <- c("Strongly agree" = 1, "Somewhat agree" = 2, "Somewhat disagree" = 3, "Strongly disagree" = 4)
binary_mapping <- c("Yes" = 1, "No" = 2)
misleading_info_mapping <- c("I do not use social media" = 5, "None" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
# Create a named list to map columns to respective mappings
mapped_columns <- list(
"CancerFrustrated" = agreement_mapping,
"CancerTrustDoctor" = trust_mapping,
"CancerTrustFamily" = trust_mapping,
"CancerTrustGov" = trust_mapping,
"CancerTrustCharities" = trust_mapping,
"CancerTrustReligiousOrgs" = trust_mapping,
"CancerTrustScientists" = trust_mapping,
"TrustHCSystem" = trust_mapping,
"Electronic2_HealthInfo" = binary_mapping,
"MisleadingHealthInfo" = misleading_info_mapping,
"SeekCancerInfo" = binary_mapping
)
# Drop rows where 'MisleadingHealthInfo' is NA
hints_cleaned <- hints_cleaned[!is.na(hints_cleaned$MisleadingHealthInfo), ]
# Apply the mappings to the respective columns
for (column in names(mapped_columns)) {
hints_cleaned[[column]] <- as.integer(factor(hints_cleaned[[column]], levels = names(mapped_columns[[column]]), labels = mapped_columns[[column]]))
}
# Load necessary libraries
library(dplyr)
library(caret)
file_path <- '../data/csv/hints_cleaned_forML_spearman.csv'
hints_cleaned <- read.csv(file_path)
# Drop the 'SeekCancerInfo' column from hints_cleaned
hints_cleaned <- hints_cleaned %>%
select(-SeekCancerInfo)
# Drop rows with NA values
hints_cleaned <- na.omit(hints_cleaned)
head(hints_cleaned)
# Load necessary libraries
library(dplyr)
library(caret)
file_path <- '../data/csv/hints_cleaned_forML_spearman.csv'
hints_cleaned <- read.csv(file_path)
# Drop the 'SeekCancerInfo' column from hints_cleaned
hints_cleaned <- hints_cleaned %>%
select(-SeekCancerInfo)
# Drop rows with NA values
hints_cleaned <- na.omit(hints_cleaned)
print(head(hints_cleaned))
print(sapply(hints_cleaned, class))
# Load necessary libraries
library(dplyr)
library(caret)
file_path <- '../data/csv/hints_cleaned_forML_spearman.csv'
hints_cleaned <- read.csv(file_path)
# Drop the 'SeekCancerInfo' column from hints_cleaned
hints_cleaned <- hints_cleaned %>%
select(-SeekCancerInfo)
# Drop rows with NA values
hints_cleaned <- na.omit(hints_cleaned)
print(head(hints_cleaned))
# Load necessary libraries
library(dplyr)
library(caret)
file_path <- '../data/csv/hints_cleaned_forML_spearman.csv'
hints_cleaned <- read.csv(file_path)
# Drop the 'SeekCancerInfo' column from hints_cleaned
hints_cleaned <- hints_cleaned %>%
select(-SeekCancerInfo, -HHID)
# Drop rows with NA values
hints_cleaned <- na.omit(hints_cleaned)
print(head(hints_cleaned))
# Load necessary libraries
library(dplyr)
library(caret)
file_path <- '../data/csv/hints_cleaned_forML_spearman.csv'
hints_cleaned <- read.csv(file_path)
# Drop the 'SeekCancerInfo' column from hints_cleaned
hints_cleaned <- hints_cleaned %>%
select(-SeekCancerInfo, -HHID)
# Drop rows with NA values
hints_cleaned <- na.omit(hints_cleaned)
print(head(hints_cleaned))
print(paste("Shape of the dataframe:", paste(dim(hints_cleaned), collapse = " x ")))
# Convert to numeric
# Define the mappings as lists in R
trust_mapping <- c("Not at all" = 4, "A little" = 3, "Some" = 2, "A lot" = 1, "no_answer" = NA)  # Example adding NA for unmatched values
agreement_mapping <- c("Strongly agree" = 1, "Somewhat agree" = 2, "Somewhat disagree" = 3, "Strongly disagree" = 4)
binary_mapping <- c("Yes" = 1, "No" = 2)
misleading_info_mapping <- c("I do not use social media" = 5, "None" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
# Create a named list to map columns to respective mappings
mapped_columns <- list(
"CancerFrustrated" = agreement_mapping,
"CancerTrustDoctor" = trust_mapping,
"CancerTrustFamily" = trust_mapping,
"CancerTrustGov" = trust_mapping,
"CancerTrustCharities" = trust_mapping,
"CancerTrustReligiousOrgs" = trust_mapping,
"CancerTrustScientists" = trust_mapping,
"TrustHCSystem" = trust_mapping,
"Electronic2_HealthInfo" = binary_mapping,
"MisleadingHealthInfo" = misleading_info_mapping,
"SeekCancerInfo" = binary_mapping
)
# Drop rows where 'MisleadingHealthInfo' is NA
hints_cleaned <- hints_cleaned[!is.na(hints_cleaned$MisleadingHealthInfo), ]
# Apply the mappings to the respective columns
for (column in names(mapped_columns)) {
hints_cleaned[[column]] <- as.integer(factor(hints_cleaned[[column]], levels = names(mapped_columns[[column]]), labels = mapped_columns[[column]]))
}
# Converting to numeric
# Define the mappings as lists in R
trust_mapping <- c("Not at all" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
agreement_mapping <- c("Strongly agree" = 1, "Somewhat agree" = 2, "Somewhat disagree" = 3, "Strongly disagree" = 4)
binary_mapping <- c("Yes" = 1, "No" = 2)
misleading_info_mapping <- c("I do not use social media" = 5, "None" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
# Create a named list to map columns to respective mappings
mapped_columns <- list(
"CancerFrustrated" = agreement_mapping,
"CancerTrustDoctor" = trust_mapping,
"CancerTrustFamily" = trust_mapping,
"CancerTrustGov" = trust_mapping,
"CancerTrustCharities" = trust_mapping,
"CancerTrustReligiousOrgs" = trust_mapping,
"CancerTrustScientists" = trust_mapping,
"TrustHCSystem" = trust_mapping,
"Electronic2_HealthInfo" = binary_mapping,
"MisleadingHealthInfo" = misleading_info_mapping,
"SeekCancerInfo" = binary_mapping
)
# Drop rows where 'MisleadingHealthInfo' is NA
hints_cleaned <- hints_cleaned[!is.na(hints_cleaned$MisleadingHealthInfo), ]
# Apply the mappings to the respective columns
for (column in names(mapped_columns)) {
hints_cleaned[[column]] <- as.integer(factor(hints_cleaned[[column]], levels = names(mapped_columns[[column]]), labels = mapped_columns[[column]]))
}
# Converting to numeric
library(dplyr)
# Define the mappings
trust_mapping <- c("Not at all" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
agreement_mapping <- c("Strongly agree" = 1, "Somewhat agree" = 2, "Somewhat disagree" = 3, "Strongly disagree" = 4)
binary_mapping <- c("Yes" = 1, "No" = 2)
misleading_info_mapping <- c("I do not use social media" = 5, "None" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
# Apply the mappings and transformations
hints_cleaned <- hints_cleaned %>%
filter(!is.na(MisleadingHealthInfo)) %>%
mutate(
CancerFrustrated = recode(CancerFrustrated, !!!agreement_mapping),
CancerTrustDoctor = recode(CancerTrustDoctor, !!!trust_mapping),
CancerTrustFamily = recode(CancerTrustFamily, !!!trust_mapping),
CancerTrustGov = recode(CancerTrustGov, !!!trust_mapping),
CancerTrustCharities = recode(CancerTrustCharities, !!!trust_mapping),
CancerTrustReligiousOrgs = recode(CancerTrustReligiousOrgs, !!!trust_mapping),
CancerTrustScientists = recode(CancerTrustScientists, !!!trust_mapping),
TrustHCSystem = recode(TrustHCSystem, !!!trust_mapping),
Electronic2_HealthInfo = recode(Electronic2_HealthInfo, !!!binary_mapping),
MisleadingHealthInfo = recode(MisleadingHealthInfo, !!!misleading_info_mapping),
SeekCancerInfo = recode(SeekCancerInfo, !!!binary_mapping)
) %>%
select(-HHID)
# Load necessary libraries
library(dplyr)
library(caret)
file_path <- '../data/csv/hints_cleaned_forML_spearman.csv'
hints_cleaned <- read.csv(file_path)
# Drop the 'SeekCancerInfo' column from hints_cleaned
hints_cleaned <- hints_cleaned %>%
select(-HHID)
# Drop rows with NA values
hints_cleaned <- na.omit(hints_cleaned)
print(head(hints_cleaned))
print(paste("Shape of the dataframe:", paste(dim(hints_cleaned), collapse = " x ")))
# Load necessary libraries
library(dplyr)
library(caret)
file_path <- '../data/csv/hints_cleaned_forML_spearman.csv'
hints_cleaned <- read.csv(file_path)
# Drop the 'SeekCancerInfo' column from hints_cleaned
hints_cleaned <- hints_cleaned %>%
select(-SeekCancerInfo, -HHID)
# Drop rows with NA values
hints_cleaned <- na.omit(hints_cleaned)
print(head(hints_cleaned))
print(paste("Shape of the dataframe:", paste(dim(hints_cleaned), collapse = " x ")))
# Converting to numeric
library(dplyr)
# Define the mappings
trust_mapping <- c("Not at all" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
agreement_mapping <- c("Strongly agree" = 1, "Somewhat agree" = 2, "Somewhat disagree" = 3, "Strongly disagree" = 4)
binary_mapping <- c("Yes" = 1, "No" = 2)
misleading_info_mapping <- c("I do not use social media" = 5, "None" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
# Apply the mappings and transformations
hints_cleaned <- hints_cleaned %>%
filter(!is.na(MisleadingHealthInfo)) %>%
mutate(
CancerFrustrated = recode(CancerFrustrated, !!!agreement_mapping),
CancerTrustDoctor = recode(CancerTrustDoctor, !!!trust_mapping),
CancerTrustFamily = recode(CancerTrustFamily, !!!trust_mapping),
CancerTrustGov = recode(CancerTrustGov, !!!trust_mapping),
CancerTrustCharities = recode(CancerTrustCharities, !!!trust_mapping),
CancerTrustReligiousOrgs = recode(CancerTrustReligiousOrgs, !!!trust_mapping),
CancerTrustScientists = recode(CancerTrustScientists, !!!trust_mapping),
TrustHCSystem = recode(TrustHCSystem, !!!trust_mapping),
Electronic2_HealthInfo = recode(Electronic2_HealthInfo, !!!binary_mapping),
MisleadingHealthInfo = recode(MisleadingHealthInfo, !!!misleading_info_mapping),
#SeekCancerInfo = recode(SeekCancerInfo, !!!binary_mapping)
) %>%
select(-HHID)
# Converting to numeric
library(dplyr)
# Define the mappings
trust_mapping <- c("Not at all" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
agreement_mapping <- c("Strongly agree" = 1, "Somewhat agree" = 2, "Somewhat disagree" = 3, "Strongly disagree" = 4)
binary_mapping <- c("Yes" = 1, "No" = 2)
misleading_info_mapping <- c("I do not use social media" = 5, "None" = 4, "A little" = 3, "Some" = 2, "A lot" = 1)
# Apply the mappings and transformations
hints_cleaned <- hints_cleaned %>%
filter(!is.na(MisleadingHealthInfo)) %>%
mutate(
CancerFrustrated = recode(CancerFrustrated, !!!agreement_mapping),
CancerTrustDoctor = recode(CancerTrustDoctor, !!!trust_mapping),
CancerTrustFamily = recode(CancerTrustFamily, !!!trust_mapping),
CancerTrustGov = recode(CancerTrustGov, !!!trust_mapping),
CancerTrustCharities = recode(CancerTrustCharities, !!!trust_mapping),
CancerTrustReligiousOrgs = recode(CancerTrustReligiousOrgs, !!!trust_mapping),
CancerTrustScientists = recode(CancerTrustScientists, !!!trust_mapping),
TrustHCSystem = recode(TrustHCSystem, !!!trust_mapping),
Electronic2_HealthInfo = recode(Electronic2_HealthInfo, !!!binary_mapping),
MisleadingHealthInfo = recode(MisleadingHealthInfo, !!!misleading_info_mapping),
#SeekCancerInfo = recode(SeekCancerInfo, !!!binary_mapping)
) %>%
#select(-HHID)
# Display the transformed dataset
print("Data after applying mappings to numeric values:")
print(head(hints_cleaned))
# Display the data types of the columns
print(sapply(hints_cleaned, class))
# Standardize the data (excluding non-numeric columns)
numeric_columns <- sapply(hints_cleaned, is.numeric)
standardized_data <- hints_cleaned[, numeric_columns] %>%
scale()  # Standardize the numeric columns
# Convert the standardized data back to a data frame
standardized_data <- as.data.frame(standardized_data)
# Define target variable
target_variable <- 'TrustHCSystem'  # Replace with your actual target column name
# Check if the target variable is in the standardized data
if (!(target_variable %in% colnames(standardized_data))) {
stop(paste("Target variable '", target_variable, "' not found in the dataset.", sep = ""))
}
# Compute Spearman correlation matrix
correlation_matrix_spearman <- cor(standardized_data, method = "spearman")
# Rename the matrix to correlation_data
correlation_data <- correlation_matrix_spearman
# Display the full Spearman correlation matrix
print("Spearman Correlation Matrix (excluding SeekCancerInfo and after standardization):")
print(correlation_data)
# Focus on the correlation of the target variable with other features
correlation_with_target_spearman <- correlation_data[, target_variable] %>%
sort(decreasing = TRUE)
print(paste("\nSpearman correlation of features with", target_variable, ":"))
print(correlation_with_target_spearman)
# Convert the correlation matrix into a long format for ggplot
melted_correlation <- melt(correlation_matrix_spearman)
# Convert the correlation matrix into a long format for ggplot
melted_correlation <- melt(correlation_matrix_spearman)
# Install and load required packages
if (!require("reshape2")) install.packages("reshape2")
if (!require("ggplot2")) install.packages("ggplot2")
library(reshape2)
library(ggplot2)
# Convert the correlation matrix into a long format for ggplot
melted_correlation <- melt(correlation_matrix_spearman)
# Mask the upper triangle of the correlation matrix
melted_correlation$value[upper.tri(correlation_matrix_spearman)] <- NA
# Plot the heatmap
ggplot(melted_correlation, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, name = "Spearman Correlation",
limits = c(-1, 1), na.value = "white") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
labs(title = "Spearman Correlation Matrix (Ordinal Data)") +
coord_fixed()  # Ensures the x and y axes are the same length
# Convert the correlation matrix into a long format for ggplot
melted_correlation <- melt(correlation_matrix_spearman)
# Mask the upper triangle and diagonal of the correlation matrix
melted_correlation$value[upper.tri(correlation_matrix_spearman, diag = TRUE)] <- NA
# Plot the heatmap
ggplot(melted_correlation, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, name = "Spearman Correlation",
limits = c(-1, 1), na.value = "white") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
labs(title = "Spearman Correlation Matrix (Ordinal Data)") +
coord_fixed()  # Ensures the x and y axes are the same length
